# Template to create a non-default VPC with a single public subnet for a WebServer

AWSTemplateFormatVersion: "2010-09-09"
Description: "Nondefault VPC with single public subnet for a WebServer"

# Input parameters for the stack
Parameters:

  # The key pair for the server
  KeyName:
    Description: "Key Pair Name for SSH access"
    Type: "AWS::EC2::KeyPair::KeyName"
    Default: aws-in-action-key-pair
    ConstraintDescription: "Must be the name of an existing key pair"

  # IPv4 Address that will be allowed to connect to the instance
  IpForSSH:
    Description: "Select the IP address from which you will be able to SSH into the instance"
    Type: "String"

# Key-value maps that will be used in the resources section
Mappings:

  # Map that takes a region and maps it to the AMI ID of the Ubuntu 64 bit image
  AWSRegionToAMI:
    us-east-1:
      ubuntu64bit: ami-6edd3078    
    us-east-2:
      ubuntu64bit: ami-fcc19b99

# The Actual infrastructure resources
Resources:

  # Security Group Public: The security group to be used for the server
  WebServerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Security Group for Web Server"
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: WebServerSG

  # Rule for allowing ICMP for a given IPv4 address
  AllowInboundHTTP:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref WebServerSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: "0.0.0.0/0"

  # Rule for allowing SSH for a given IPv4 address
  AllowInboundSSH:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref WebServerSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: !Join ["", [ !Ref IpForSSH, "/32" ] ]

  # Nondefault VPC definition
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: "aws-ia-vpc"

  # InternetGateway
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"

  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Subnet
  PublicSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone:
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      CidrBlock: "10.0.0.0/24"
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: aws-ia-public-subnet

  # Route Table for the subnet
  RouteTablePublicSubnet:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC

  RouteTableAssociationForPublicSubnet:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref RouteTablePublicSubnet
  
  RoutePublicSubnetToInternet:
    Type: "AWS::EC2::Route"
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTablePublicSubnet
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  # Network ACL
  NetworkAclPublicSubnet:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId: !Ref VPC

  SubnetNetworkAclAssociationPublicSubnet:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet
      NetworkAclId: !Ref NetworkAclPublicSubnet

  NetworkAclEntryInbound:
    Type:  "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref NetworkAclPublicSubnet
      Egress: false     # inbound
      RuleNumber: 100
      Protocol: "-1"    # ALL
      RuleAction: allow
      CidrBlock: "0.0.0.0/0"

  NetworkAclEntryOutbound:
    Type:  "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref NetworkAclPublicSubnet
      Egress: true     # inbound
      RuleNumber: 100
      Protocol: "-1"    # ALL
      RuleAction: allow
      CidrBlock: "0.0.0.0/0"

  # EC2 Web Server
  WebServer:
    Type: "AWS::EC2::Instance"
    Properties:
      InstanceType: "t2.micro"
      KeyName: !Ref KeyName
      ImageId: !FindInMap [ AWSRegionToAMI , !Ref "AWS::Region", ubuntu64bit ]
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0                    
          SubnetId: !Ref PublicSubnet
          GroupSet: 
            - !Ref WebServerSecurityGroup
      Tags:
        - Key: Name
          Value: "Web Server"

# Output information of the stack
Outputs:
  
  WebServerDns:
    Description: "Public IP address of the Web Server"
    Value: !GetAtt WebServer.PublicDnsName
       